import java.nio.file.Files
import java.nio.file.Paths

allprojects {
  group = 'org.axonframework.samples'
  version = '0.0.1-SNAPSHOT'
}

buildscript {
  repositories {
    mavenLocal()
    maven {
      url = 'http://repo.maven.apache.org/maven2'
    }
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.31"
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'maven-publish'

  repositories {
    mavenLocal()
    maven {
      url = 'http://repo.maven.apache.org/maven2'
    }
  }

  dependencies {
    compile 'org.axonframework:axon-spring-boot-starter:3.0.4'
    compile 'org.axonframework:axon-distributed-commandbus-springcloud:3.0.4'
    compile 'org.springframework.cloud:spring-cloud-starter-eureka:1.2.2.RELEASE'
    compile 'org.springframework.boot:spring-boot-devtools:1.5.2.RELEASE'
    compile 'com.h2database:h2:1.4.193'
    compile 'mysql:mysql-connector-java:5.1.41'
    testCompile 'org.springframework.boot:spring-boot-starter-test:1.5.2.RELEASE'
    testCompile 'org.axonframework:axon-test:3.0.4'
  }

  sourceCompatibility = '1.8'

  publishing {
    publications {
      maven(MavenPublication) {
        from(components.java)
      }
    }
  }

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }
}

static def path(Project project, String folderName) {
  Files.isDirectory(Paths.get(project.projectDir.absolutePath, "src", "main", folderName))
}

def javaProjects() {
  return subprojects.findAll {path(it, "java")}
}

def kotlinProjects() {
  return subprojects.findAll {path(it, "kotlin")}
}

configure(javaProjects()) {
  apply plugin: 'java'
}

configure(kotlinProjects()) {
  apply plugin: 'kotlin'

  compileKotlin {
    kotlinOptions {
      jvmTarget = "1.8"
      //freeCompilerArgs = ["-Xjsr305=strict"]
    }
  }
}
